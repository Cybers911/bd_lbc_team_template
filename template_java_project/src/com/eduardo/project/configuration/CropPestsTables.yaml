Resources:
  CornPestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "CornPests"
      AttributeDefinitions:
        - AttributeName: "pestId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pestId"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
  WheatPestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "WheatPests"
      AttributeDefinitions:
        - AttributeName: "pestId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pestId"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
  CornPestsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const dynamo = new AWS.DynamoDB.DocumentClient();
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole, "Arn" ]
      Runtime: nodejs18.x
      Timeout: 60
  WheatPestsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const dynamo = new AWS.DynamoDB.DocumentClient();
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole, "Arn" ]
      Runtime: nodejs18.x
      Timeout: 60
